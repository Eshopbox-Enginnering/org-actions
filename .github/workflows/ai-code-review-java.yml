name: Codex AI Code Review (Java)

on:
  workflow_call: {}
  workflow_dispatch:  # Allow manual run

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ai-review-java-${{ github.repository }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  ai_review:
    name: AI Code Review
    if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.draft }}
    runs-on: self-hosted
    timeout-minutes: 10

    env:
      AI_PROVIDER: openai
      AI_TEMPERATURE: "0.3"
      MAX_COMMENTS: "12"
      APPROVE_REVIEWS: "false"

      EXCLUDE_PATTERNS: >-
        **/*.md,**/*.json,**/target/**,**/build/**,**/*.class,**/*.log,
        **/.mvn/wrapper/**,**/gradle/wrapper/**,**/generated-sources/**,**/build/generated/**,
        **/*.jar,**/*.war,**/*.png,**/*.jpg,**/*.jpeg,**/*.gif,**/*.svg,**/*.mp4,
        **/src/test/**,**/*Test.java,**/*Tests.java,**/*IT.java

      PROJECT_CONTEXT: |
        Java Spring Boot service (Maven).
        - Constructor injection; validate inputs.
        - Handle exceptions carefully; avoid logging secrets/PII.
        - Thread-safety & performance in hot paths.
        - Fast, isolated tests.

      MAX_FILE_BYTES: "20000"   # 20 KB cutoff

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect relevant changes
        id: changes
        run: |
          git fetch origin ${{ github.base_ref }} --quiet || true
          if git diff --quiet origin/${{ github.base_ref }}...HEAD -- src/main/java/ src/main/resources/; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      # 🧩 Enforce test validation for changed Java files
      - name: Validate test files changed (Java)
        id: test_check
        run: |
          git fetch origin ${{ github.base_ref }} --quiet || true
          git diff --name-only origin/${{ github.base_ref }}...HEAD -- src/main/java/ src/test/java/ > changed_files.txt

          echo "🔍 Checking modified Java files..."
          cat changed_files.txt

          # Detect changed Java source files (excluding tests)
          FILES=$(grep '^src/main/java/.*\.java$' changed_files.txt | grep -v -E '(Test|Tests|IT)\.java$' || true)

          if [ -z "$FILES" ]; then
            echo "✅ No source files changed."
            echo "TESTS_FOUND=true" >> $GITHUB_ENV
            exit 0
          fi

          echo "🧩 Source files requiring test verification:"
          echo "$FILES"

          MISSING_TESTS=0
          : > missing_tests.txt

          for f in $FILES; do
            # Derive potential test file path under src/test/java
            relative_path=${f#src/main/java/}
            test_path="src/test/java/${relative_path%.java}Test.java"
            test_path2="src/test/java/${relative_path%.java}Tests.java"
            test_path3="src/test/java/${relative_path%.java}IT.java"

            if grep -q "$test_path" changed_files.txt || grep -q "$test_path2" changed_files.txt || grep -q "$test_path3" changed_files.txt; then
              echo "✅ Test present for: $f"
            else
              echo "❌ Missing test for: $f"
              echo "- $f" >> missing_tests.txt
              MISSING_TESTS=$((MISSING_TESTS+1))
            fi
          done

          if [ "$MISSING_TESTS" -gt 0 ]; then
            echo "❌ Found $MISSING_TESTS file(s) without corresponding test updates."
            echo "TESTS_FOUND=false" >> $GITHUB_ENV
            exit 1
          else
            echo "✅ All changed Java classes have test updates."
            echo "TESTS_FOUND=true" >> $GITHUB_ENV
          fi

      - name: Comment on PR if missing tests
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ⚠️ **Test case enforcement failed**
            Some Java classes were modified without corresponding unit or integration tests.

            **Files missing tests:**
            ```
            $(cat missing_tests.txt)
            ```
            Please add or update the respective test files under `src/test/java` before requesting AI review.

      - name: Build payload (diff for large files, full for small)
        if: steps.changes.outputs.no_changes == 'false' && env.TESTS_FOUND == 'true'
        id: payload
        run: |
          set -euo pipefail
    
          git fetch origin ${{ github.base_ref }} --depth=1 --quiet
          : > payload.txt
          counted=0
          large=false
          total_bytes=0
      
          for f in $(git diff --name-only origin/${{ github.base_ref }}...HEAD -- src/ libs/ apps/); do
            [ -f "$f" ] || continue
            sz=$(wc -c <"$f" | tr -d ' ')
            total_bytes=$((total_bytes + sz))
            if [ "$sz" -gt "${{ env.MAX_FILE_BYTES }}" ]; then
              echo "### Diff for $f" >> payload.txt
              git diff -U3 origin/${{ github.base_ref }}...HEAD -- "$f" >> payload.txt
              large=true
            else
              echo "### Full content of $f" >> payload.txt
              cat "$f" >> payload.txt
            fi
            counted=$((counted + 1))
          done
      
          estimated_tokens=$(( (total_bytes / 4) * 2 + 1500 ))
      
          if [ "$estimated_tokens" -gt 25000 ] || [ "$large" = "true" ]; then
            model="${{ vars.AI_MODEL_4_MINI }}"
          else
            model="${{ vars.AI_MODEL_4 }}"
          fi
      
          echo "selected_model=$model" >> $GITHUB_OUTPUT
          echo "files_count=$counted"  >> $GITHUB_OUTPUT
          echo "estimated_tokens=$estimated_tokens" >> $GITHUB_OUTPUT
      
          {
            echo "### AI Review Preflight (Java)"
            echo "- Files counted: **$counted**"
            echo "- Estimated tokens: **$estimated_tokens**"
            echo "- Selected model: **$model**"
          } >> "$GITHUB_STEP_SUMMARY"
            
      - name: Jitter to reduce org-wide bursts (5–25s)
        if: steps.payload.outputs.files_count != '0'
        run: sleep $(( (RANDOM % 21) + 5 ))

      - name: Run AI Code Review
        if: env.TESTS_FOUND == 'true' && steps.payload.outputs.files_count != '0'
        id: ai_review
        uses: Eshopbox-Enginnering/ai-codereviewer@main
        with:
          GITHUB_TOKEN:   ${{ secrets.GITHUB_TOKEN }}
          AI_PROVIDER:    ${{ env.AI_PROVIDER }}
          AI_API_KEY:     ${{ secrets.AI_REVIEW_CODEX }}
          AI_MODEL:       ${{ steps.payload.outputs.selected_model }}
          AI_TEMPERATURE: ${{ env.AI_TEMPERATURE }}
          APPROVE_REVIEWS: ${{ env.APPROVE_REVIEWS }}
          MAX_COMMENTS:   ${{ env.MAX_COMMENTS }}
          PROJECT_CONTEXT: ${{ env.PROJECT_CONTEXT }}
          EXCLUDE_PATTERNS: ${{ env.EXCLUDE_PATTERNS }}

      - name: Skip log message
        if: steps.changes.outputs.no_changes == 'true'
        run: echo "✅ No relevant Java code changes — skipping AI review."