name: Codex AI Code Review (Java)

on:
  workflow_call: {}

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ai-review-java-${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  ai_review:
    name: AI Code Review
    if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.draft }}
    runs-on: ubuntu-latest

    env:
      AI_PROVIDER: openai
      AI_TEMPERATURE: "0.3"
      MAX_COMMENTS: "15"
      APPROVE_REVIEWS: "false"
      # Tighten excludes for Java repos
      EXCLUDE_PATTERNS: >-
        **/*.md,**/*.json,**/target/**,**/build/**,**/*.class,**/*.log,
        **/.mvn/wrapper/**,**/gradle/wrapper/**,**/generated-sources/**,**/build/generated/**,
        **/*.jar,**/*.war,**/*.png,**/*.jpg,**/*.jpeg,**/*.gif,**/*.svg,**/*.mp4
      PROJECT_CONTEXT: |
        Java Spring Boot service (Maven).
        - Constructor injection; validate inputs.
        - Handle exceptions carefully; avoid logging secrets/PII.
        - Thread-safety & perf in hot paths.
        - Fast, isolated tests.

      # NEW: caps to avoid TPM overflow (~4 chars ≈ 1 token)
      MAX_TOTAL_BYTES: "120000"   # ~30k tokens total across files
      MAX_FILE_BYTES:  "30000"    # skip any single file >30k chars

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Check if relevant source code changed
        id: changes
        run: |
          git fetch origin ${{ github.base_ref }} --quiet || true
          if git diff --quiet origin/${{ github.base_ref }} HEAD -- src/main/java/ src/test/java/ src/main/resources/; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Get changed files list (filtered)
        if: steps.changes.outputs.no_changes == 'false'
        id: files
        run: |
          git diff --name-only origin/${{ github.base_ref }} HEAD -- src/main/java/ src/test/java/ src/main/resources/ \
          | grep -v -E '\.lock$|\.json$|\.md$|\.ya?ml$|\.svg$|\.png$|\.jpe?g$|\.gif$|\.mp4$|^target/|^build/' \
          > files.txt
          echo "files<<EOF" >> $GITHUB_OUTPUT
          cat files.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Trim files to stay under model limits
        if: steps.changes.outputs.no_changes == 'false'
        id: trim
        env:
          MAX_TOTAL_BYTES: ${{ env.MAX_TOTAL_BYTES }}
          MAX_FILE_BYTES:  ${{ env.MAX_FILE_BYTES }}
        run: |
          set -euo pipefail
          total=0
          out=""
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            # skip deleted/renamed files that don't exist at HEAD
            [ -f "$f" ] || continue
            sz=$(wc -c <"$f" | tr -d ' ')
            # skip any single huge file
            if [ "$sz" -gt "$MAX_FILE_BYTES" ]; then
              echo "⏭️  Skipping $f (size $sz > $MAX_FILE_BYTES)"
              continue
            fi
            if [ $((total + sz)) -gt "$MAX_TOTAL_BYTES" ]; then
              echo "⛔ Reached cap ${MAX_TOTAL_BYTES} bytes; stopping selection."
              break
            fi
            out="${out}${f}\n"
            total=$((total + sz))
          done < <(printf "%s\n" "${{ steps.files.outputs.files }}")

          {
            echo "files<<EOF"
            printf "%b" "$out"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

          echo "Selected bytes: $total"
          if [ -z "$out" ]; then
            echo "::warning::No files selected after trimming; AI step will be skipped."
          fi

      - name: Run AI Code Review
        if: steps.changes.outputs.no_changes == 'false' && steps.trim.outputs.files != ''
        id: ai_review
        uses: Eshopbox-Enginnering/ai-codereviewer@main
        with:
          GITHUB_TOKEN:   ${{ secrets.GITHUB_TOKEN }}
          AI_PROVIDER:    ${{ env.AI_PROVIDER }}
          AI_API_KEY:     ${{ secrets.AI_REVIEW_CODEX }}
          AI_MODEL:       ${{ vars.AI_MODEL }}
          AI_TEMPERATURE: ${{ env.AI_TEMPERATURE }}
          APPROVE_REVIEWS: ${{ env.APPROVE_REVIEWS }}
          MAX_COMMENTS:   ${{ env.MAX_COMMENTS }}
          PROJECT_CONTEXT: ${{ env.PROJECT_CONTEXT }}
          EXCLUDE_PATTERNS: ${{ env.EXCLUDE_PATTERNS }}
          CONTEXT_FILES:  ${{ steps.trim.outputs.files }}

      - name: Fail if AI review posted issues
        if: |
          steps.changes.outputs.no_changes == 'false' &&
          (
            failure() ||
            contains(steps.ai_review.outputs.log || '', 'insufficient_quota') ||
            contains(steps.ai_review.outputs.log || '', 'RateLimitError') ||
            contains(steps.ai_review.outputs.log || '', 'quota') ||
            contains(steps.ai_review.outputs.log || '', 'error')
          )
        run: exit 1

      - name: Skip log message
        if: steps.changes.outputs.no_changes == 'true'
        run: echo "✅ No relevant Java code changes — skipping AI review."
