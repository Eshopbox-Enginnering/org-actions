name: Codex AI Code Review (Java)

on:
  workflow_call: {}
  workflow_dispatch:  # Allow manual run

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ai-review-java-${{ github.repository }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  ai_review:
    name: AI Code Review
    if: ${{ github.event_name != 'pull_request' || !github.event.pull_request.draft }}
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      AI_PROVIDER: openai
      AI_TEMPERATURE: "0.3"
      MAX_COMMENTS: "12"
      APPROVE_REVIEWS: "false"

      EXCLUDE_PATTERNS: >-
        **/*.md,**/*.json,**/target/**,**/build/**,**/*.class,**/*.log,
        **/.mvn/wrapper/**,**/gradle/wrapper/**,**/generated-sources/**,**/build/generated/**,
        **/*.jar,**/*.war,**/*.png,**/*.jpg,**/*.jpeg,**/*.gif,**/*.svg,**/*.mp4,
        **/src/test/**,**/*Test.java,**/*IT.java,**/*.lock,**/pom.xml

      PROJECT_CONTEXT: |
        Java Spring Boot service (Maven).
        - Constructor injection; validate inputs.
        - Handle exceptions carefully; avoid logging secrets/PII.
        - Thread-safety & performance in hot paths.
        - Fast, isolated tests.

      MAX_FILE_BYTES: "10000"   # 10 KB cutoff (tighter)

    steps:
      - name: Checkout PR code
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Detect relevant changes
        id: changes
        run: |
          git fetch origin ${{ github.base_ref }} --quiet || true
          if git diff --quiet origin/${{ github.base_ref }}...HEAD -- src/main/java/ src/main/resources/; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Build payload and split into chunks
        if: steps.changes.outputs.no_changes == 'false'
        id: payload
        run: |
          set -euo pipefail

          git fetch origin ${{ github.base_ref }} --depth=1 --quiet
          : > payload.txt
          counted=0
          total_bytes=0
          large=false

          for f in $(git diff --name-only origin/${{ github.base_ref }}...HEAD -- src/ libs/ apps/); do
            [ -f "$f" ] || continue
            sz=$(wc -c <"$f" | tr -d ' ')
            total_bytes=$((total_bytes + sz))
            if [ "$sz" -gt "${{ env.MAX_FILE_BYTES }}" ]; then
              echo "### Diff for $f" >> payload.txt
              git diff -U3 origin/${{ github.base_ref }}...HEAD -- "$f" >> payload.txt
              large=true
            else
              echo "### Full content of $f" >> payload.txt
              cat "$f" >> payload.txt
            fi
            counted=$((counted + 1))
          done

          mkdir chunks
          # Split into chunks of ~8000 lines (~80-100k tokens)
          split -l 8000 payload.txt chunks/chunk_

          echo "files_count=$counted"  >> $GITHUB_OUTPUT
          echo "chunk_count=$(ls chunks | wc -l)" >> $GITHUB_OUTPUT

          {
            echo "### AI Review Preflight (Java)"
            echo "- Files counted: **$counted**"
            echo "- Chunks created: **$(ls chunks | wc -l)**"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Jitter to reduce org-wide bursts (5â€“25s)
        if: steps.payload.outputs.files_count != '0'
        run: sleep $(( (RANDOM % 21) + 5 ))

      - name: Run AI Code Review per chunk
        if: steps.payload.outputs.files_count != '0'
        run: |
          for f in chunks/*; do
            echo "ðŸ”Ž Reviewing $f ..."
            cat "$f" | gh workflow run .github/workflows/ai_review_chunk.yml -f chunk_file=- 
          done

      - name: Skip log message
        if: steps.changes.outputs.no_changes == 'true'
        run: echo "âœ… No relevant Java code changes â€” skipping AI review."
