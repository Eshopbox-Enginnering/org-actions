name: Reusable • Block WIP → Feature ≤200 lines

on:
  workflow_call:
  workflow_dispatch:  # Allow manual run

permissions:
  contents: read

concurrency:
  group: wip-feature-limit-${{ github.repository }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  restrict-large-wip-pr:
    runs-on: self-hosted
    timeout-minutes: 10
    env:
      # Normal cap
      MAX_CHANGED_LINES: "200"
      # Higher cap when WIP branch name indicates schema/migration/setup/codegen
      BYPASS_HEAD_REGEX: '^wip/(schema|migration|migrations|db|database|setup|codegen)(/|$)'
      BYPASS_MAX_CHANGED_LINES: "600"
      # Don’t count obvious noise when measuring size
      EXCLUDE_NOISE_REGEX: >-
        \.spec\.(ts|js|java)$|\.stories\.(ts|js)$|__snapshots__/
        |\.md$|\.adoc$|\.rst$|\.txt$
        |\.lock$|package-lock\.json$|yarn\.lock$|pnpm-lock\.yaml$|gradle\.lockfile$
        |^dist/|^build/|^target/|^out/|^storybook-static/|coverage/
        |/generated-sources/|/build/generated/
        |\.class$|\.log$|\.jar$|\.war$
        |\.png$|\.jpe?g$|\.gif$|\.svg$|\.webp$|\.avif$|\.ico$|\.mp4$|\.woff2?$|\.ttf$|\.otf$
        |\.json$|\.csv$|\.tsv$|\.xliff?$|\.po$
        |^\.mvn/wrapper/|/gradle/wrapper/|/(mvnw|gradlew)(\.cmd)?$

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Enforce WIP → Feature size policy (branch-only bypass)
        shell: bash
        run: |
          set -euo pipefail

          # Read PR context (no jq needed)
          HEAD_BRANCH="${{ github.head_ref || '' }}"
          BASE_BRANCH="${{ github.base_ref || '' }}"
          echo "Source (head): ${HEAD_BRANCH:-<unknown>}"
          echo "Target (base): ${BASE_BRANCH:-<unknown>}"

          # Guard: only act on PRs with both refs
          if [[ -z "${HEAD_BRANCH}" || -z "${BASE_BRANCH}" ]]; then
            echo "::notice title=Skipped::No head/base ref (non-PR event)."
            exit 0
          fi

          hb_l="${HEAD_BRANCH,,}"
          bb_l="${BASE_BRANCH,,}"

          # Only apply on WIP → Feature PRs
          if [[ "$hb_l" == wip/* && "$bb_l" == feature/* ]]; then
            echo "WIP → Feature PR detected. Checking changed lines…"

            # Ensure remote-tracking ref for base exists
            git fetch --no-tags --depth=1 origin "refs/heads/$BASE_BRANCH:refs/remotes/origin/$BASE_BRANCH" || true

            # Skip pure rename-only PRs (all entries R100)
            ns="$(git diff --name-status "origin/${BASE_BRANCH}...HEAD" || true)"
            if [[ -n "$ns" ]] && ! echo "$ns" | awk '{print $1}' | grep -qv '^R100$'; then
              echo "::notice title=Rename-only PR::All changes are pure renames (R100); skipping size enforcement."
              exit 0
            fi

            # Compute numstat ignoring whitespace-only changes
            numstat="$(git diff -w --numstat "origin/${BASE_BRANCH}...HEAD" || true)"
            if [[ -z "$numstat" ]]; then
              CHANGED_LINES=0
            else
              filtered="$(printf "%s\n" "$numstat" | grep -Ev "${EXCLUDE_NOISE_REGEX}" || true)"
              if [[ -z "$filtered" ]]; then
                CHANGED_LINES=0
              else
                CHANGED_LINES="$(printf "%s\n" "$filtered" | awk '$1 ~ /^[0-9]+$/ && $2 ~ /^[0-9]+$/ {a+=$1; d+=$2} END {print (a+d)+0}')"
              fi
            fi

            # Decide cap based on branch-based bypass
            CAP="${MAX_CHANGED_LINES}"
            if [[ "$hb_l" =~ ${BYPASS_HEAD_REGEX} ]]; then
              echo "Bypass candidate: branch matches ${BYPASS_HEAD_REGEX}"
              CAP="${BYPASS_MAX_CHANGED_LINES}"
            fi

            # Summary
            {
              echo "### WIP → Feature size check"
              echo "- Base: \`$BASE_BRANCH\`"
              echo "- Head: \`$HEAD_BRANCH\`"
              echo "- Changed lines (after excludes): **$CHANGED_LINES**"
              echo "- Threshold: **$CAP** (bypass ${hb_l} $( [[ "$hb_l" =~ ${BYPASS_HEAD_REGEX} ]] && echo "ON" || echo "OFF" ))"
            } >> "$GITHUB_STEP_SUMMARY"

            # Enforce
            if (( CHANGED_LINES > CAP )); then
              echo "::error title=PR too large::Changed lines ${CHANGED_LINES} exceed threshold ${CAP}."
              exit 1
            else
              echo "::notice title=PR allowed::Within threshold (${CHANGED_LINES} ≤ ${CAP})."
              exit 0
            fi

          else
            echo "::notice title=Skipped::Not a WIP → Feature PR. Skipping size check."
            exit 0
          fi
