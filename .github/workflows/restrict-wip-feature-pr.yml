name: Reusable • Block WIP → Feature ≤200 lines (with schema/migration bypass)

on:
  workflow_call:

permissions:
  contents: read

concurrency:
  group: wip-feature-limit-${{ github.repository }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  restrict-large-wip-pr:
    runs-on: ubuntu-latest
    env:
      # General cap
      MAX_CHANGED_LINES: "200"
      # Higher cap for schema/migrations/setup changes
      SCHEMA_MAX_CHANGED_LINES: "600"

      # Allow bypass if WIP branch name matches these prefixes (case-insensitive)
      # e.g. wip/schema/..., wip/migration/..., wip/setup/..., wip/db/..., wip/codegen/...
      BYPASS_HEAD_REGEX: '^wip/(schema|migration|migrations|db|database|setup|codegen)(/|$)'

      # Treat these paths as "exempt" (schema/migrations/setup/codegen)
      EXEMPT_PATHS_REGEX: '(^|/)(migrations?|schema|db|database|generated|proto)(/|$)|\.(sql|ddl|dml|pb\.ts|generated\.ts|generated\.java)$'

      # Noise to exclude from counting (Angular + Java repos)
      EXCLUDE_NOISE_REGEX: >-
        \.spec\.(ts|js|java)$|\.stories\.(ts|js)$|__snapshots__/
        |\.md$|\.adoc$|\.rst$|\.txt$
        |\.lock$|package-lock\.json$|yarn\.lock$|pnpm-lock\.yaml$|gradle\.lockfile$
        |^dist/|^build/|^target/|^out/|^storybook-static/|coverage/
        |/generated-sources/|/build/generated/
        |\.class$|\.log$|\.jar$|\.war$
        |\.png$|\.jpe?g$|\.gif$|\.svg$|\.webp$|\.avif$|\.ico$|\.mp4$|\.woff2?$|\.ttf$|\.otf$
        |\.json$|\.csv$|\.tsv$|\.xliff?$|\.po$
        |^\.mvn/wrapper/|/gradle/wrapper/|/(mvnw|gradlew)(\.cmd)?$

    steps:
      - uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Enforce WIP → Feature size policy
        shell: bash
        run: |
          set -euo pipefail

          # PR context
          HEAD_BRANCH=$(jq -r .pull_request.head.ref "$GITHUB_EVENT_PATH")
          BASE_BRANCH=$(jq -r .pull_request.base.ref "$GITHUB_EVENT_PATH")
          LABELS=$(jq -r '[.pull_request.labels[].name] | join(",")' "$GITHUB_EVENT_PATH")
          echo "Source (head): $HEAD_BRANCH"
          echo "Target (base): $BASE_BRANCH"
          echo "Labels: ${LABELS:-<none>}"

          hb_l="${HEAD_BRANCH,,}"
          bb_l="${BASE_BRANCH,,}"

          # Optional DB-review override label
          HAS_DB_LABEL=false
          if [[ ",$LABELS," == *",db-review,"* || ",$LABELS," == *",DB-Review,"* ]]; then
            HAS_DB_LABEL=true
          fi

          # Only apply on WIP → Feature PRs
          if [[ "$hb_l" == wip/* && "$bb_l" == feature/* ]]; then
            echo "WIP → Feature PR detected. Checking changed lines…"

            # Ensure remote-tracking ref for base
            git fetch --no-tags --depth=1 origin "refs/heads/$BASE_BRANCH:refs/remotes/origin/$BASE_BRANCH" || true

            # Skip pure rename-only PRs (all files R100)
            ns="$(git diff --name-status "origin/${BASE_BRANCH}...HEAD" || true)"
            if [[ -n "$ns" ]] && ! echo "$ns" | awk '{print $1}' | grep -qv '^R100$'; then
              echo "::notice title=Rename-only PR::All changes are pure renames (R100); skipping size enforcement."
              exit 0
            fi

            # Compute numstat ignoring whitespace-only changes (-w)
            numstat="$(git diff -w --numstat "origin/${BASE_BRANCH}...HEAD" || true)"
            if [[ -z "$numstat" ]]; then
              general=0; exempt=0; total=0
            else
              filtered="$(printf "%s\n" "$numstat" | grep -Ev "${EXCLUDE_NOISE_REGEX}" || true)"
              if [[ -z "$filtered" ]]; then
                general=0; exempt=0; total=0
              else
                exempt_lines="$(printf "%s\n" "$filtered" | grep -E "${EXEMPT_PATHS_REGEX}" || true)"
                general_lines="$(printf "%s\n" "$filtered" | grep -Ev "${EXEMPT_PATHS_REGEX}" || true)"

                exempt=$( [[ -n "$exempt_lines" ]] && printf "%s\n" "$exempt_lines" | awk '{a+=$1; d+=$2} END {print a+d+0}' || echo 0 )
                general=$( [[ -n "$general_lines" ]] && printf "%s\n" "$general_lines" | awk '{a+=$1; d+=$2} END {print a+d+0}' || echo 0 )
                total=$(( general + exempt ))
              fi
            fi

            {
              echo "### WIP → Feature size check"
              echo "- Base: \`$BASE_BRANCH\`"
              echo "- Head: \`$HEAD_BRANCH\`"
              echo "- General code: **$general** (cap: ${MAX_CHANGED_LINES})"
              echo "- Schema/Migrations/Setup: **$exempt** (cap: ${SCHEMA_MAX_CHANGED_LINES})"
              echo "- Total (after excludes): **$total**"
              echo "- Bypass (branch matches): $([[ "${hb_l}" =~ ${BYPASS_HEAD_REGEX} ]] && echo true || echo false)"
              echo "- db-review label: ${HAS_DB_LABEL}"
            } >> "$GITHUB_STEP_SUMMARY"

            BYPASS=false
            if [[ "$hb_l" =~ ${BYPASS_HEAD_REGEX} ]]; then
              BYPASS=true
              echo "Bypass candidate: branch matches schema/migration/setup/codegen pattern."
            fi

            # Decision
            if [[ "$BYPASS" == "true" || "$HAS_DB_LABEL" == "true" ]]; then
              # Relaxed cap for exempt paths, strict cap for general code
              if (( general > MAX_CHANGED_LINES )); then
                echo "::error title=PR too large (general)::General code ${general} > ${MAX_CHANGED_LINES} even with schema bypass."
                exit 1
              fi
              if (( exempt > SCHEMA_MAX_CHANGED_LINES )) && [[ "$HAS_DB_LABEL" != "true" ]]; then
                echo "::error title=PR too large (schema/migrations)::Schema/migration lines ${exempt} > ${SCHEMA_MAX_CHANGED_LINES}. Add 'db-review' label if appropriate."
                exit 1
              fi
              echo "::notice title=Bypass applied::Schema/migration/setup branch or 'db-review' label detected; relaxed cap applied to exempt paths."
              exit 0
            else
              # Standard rule: enforce general cap only
              if (( general > MAX_CHANGED_LINES )); then
                echo "::error title=PR too large::General code ${general} > ${MAX_CHANGED_LINES}. Use WIP slicing or request 'db-review' if mostly schema."
                exit 1
              fi
              echo "::notice title=PR allowed::Within general cap (${general} ≤ ${MAX_CHANGED_LINES})."
              exit 0
            fi

          else
            echo "::notice title=Skipped::Not a WIP → Feature PR. Skipping size check."
          fi
